services:
  elasticsearch:
    image: elasticsearch:8.15.5
    container_name: elasticsearch-example
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data_example:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.15.5
    container_name: kibana-example
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch

  logstash:
    image: logstash:8.15.5
    container_name: logstash-example
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"



  kafka-1:
    image: bitnami/kafka:latest
    #    открываем брокеру порт 9092 - пробрасываем на 9092
    ports:
      - "9092:9092"
    environment: # переменные среды те же переменные которые я настраивал локльно дл k-raft режима
      #      id узла
      - KAFKA_CFG_NODE_ID=1
      #      id кластера (то что генерил локально)
      - KAFKA_KRAFT_CLUSTER_ID=PVjHlx7ESeesq55jeB6Efw
      #      роли сервера broker - тот кто принимает и отправляет сообщения controller - роль сервера которая заключается в управлении методанными этого сервера
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      #      тут указываем наши контроллеры 1@kafka-1:9091 -id@nameOfServer:port (на котором сервер открыт)
      #      т.к как каждый сервер это отдельно поднятый контейнер мы и херачим все порты одинаковые
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      #      внутренний порт для брокера 9090 для контроллера 9091 внешний порт длядоступа к брокеру 9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      #      по какому порту клиенты смогут достучаться до нашего брокера: внутренний адр. //kafka-1:9090 - EXTERNAL://${HOSTNAME:-localhost}:9092 - внешний
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      #      SECURITY_PROTOCOL: для контроллера PLAINTEXT, внешний PLAINTEXT, для брокера PLAINTEXT (т.е не кодировать сообщения при отправке)
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      #     Задаем имя контроллера - CONTROLLER
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      #      Имя брокера - PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      #      пробрасываем папку из контейнера с данными на хост чтобы вся инфа хранилась на компе
      #      если удалим контейнер то создав его снова по образу он увидит нашу папку с данными
      #      и использует ее
      - /home/seiran/projects/kafka-compose/servers/server-1:/bitnami/kafka


  kafka-2:
    image: bitnami/kafka:latest
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=PVjHlx7ESeesq55jeB6Efw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9090,EXTERNAL://${HOSTNAME:-localhost}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - /home/seiran/projects/kafka-compose/servers/server-2:/bitnami/kafka



  kafka-3:
    image: bitnami/kafka:latest
    ports:
      - "9096:9096"
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=PVjHlx7ESeesq55jeB6Efw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9090,EXTERNAL://${HOSTNAME:-localhost}:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - /home/seiran/projects/kafka-compose/servers/server-3:/bitnami/kafka


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      # Указываем URL для подключения к Kafka-брокерам
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9094,kafka-3:9096
      # Опционально, задаем SSL/TLS или авторизацию, если нужно
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - ZIPKIN_HTTP_PORT=9411
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

volumes:
  elasticsearch_data_example:
    driver: local